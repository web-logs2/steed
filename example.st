(def concate (a b)
 (format "{}" a )
)
(concate "hello" "world")
(assert
    (==
        ((lambda ( x y) (+ x y)) 2 3)
        5
    )
    "why not"
)

(let ((a 7) (b 2) c)
    (format "{}" a)
    (format "{}" b)
    (let ((c 4) (b 11))
        (format "{}" c)
        (format "{}" b)
    )
)

(if true ( format "{}" "then-block"))
(if true ( format "{}" "then-block") (format "{}" "else-block") )
(if false ( format "{}" "then-block") (format "{}" "else-block"))
(if false ( format "{}" "then-block"))

(format "{}" (block (+ 1 1) (- 1 1) (* 9 9)))

(format "{}" '(1 2 3))
(format "{}" '3)
(format "{}" `(4 5))
(format "{}" `(4 5 (7 8 ,(+ 6 4) ,120)))

(format "{}" (when true (+1 2)) )
(format "{}" (when false (+1 2)) )

(assert (<= 3 5) "yes")
(assert (== (>=4 99) false) "yes")
(assert (!= 3 5) "yes")

(for (i 0) (< i 5) (+ i 1)
    (block (format "{}" i)
    (assert (< i 10) "why not")
    )
)
(dotimes i 4 (format "{}" i))
(setq foo "=foo=" bar foo)
(format "{}" foo)
(format "{}" bar)
(assert (== "=foo=" foo) "why not")
(assert (!= "-foo=" foo) "why not")
(assert (== "=foo=" bar) "why not")
(assert (!= "-foo=" bar) "why not")
(let ((a 3)
        (b 4)
        (c 5))
    (assert (== 35 (* (+ a b) c) ) "why not" ))
(let ((a 3))
    (+ a 2))
(setq w 77)
 (let ((w 8)
        (x w))
    (+ w x))

(cons 1 nil)
(cons 2 (cons 1 nil))
(cons 3 (cons 2 (cons 1 nil)))
(cons 1 ())
(cons 2 (cons 1 ()))
(cons 3 (cons 2 (cons 1 ())))
(list 1 2 3)
(list 1 2 'hello "there" 3)
(list)
(list ())
(list nil)
(list (+ 3 4) (- 3 5))
(setq my-list (quote (1 2 3 4 5)))
(format "{}" my-list)
(rest my-list)
(first (rest my-list))
(rest (rest my-list))
(first (rest (rest my-list)))
(rest (rest (rest my-list)))
(first (rest (rest (rest my-list))))
(assert (== (first (list 4 2 3)) 4 ) "why not")