(defun concate (a b)
 (format "{}" a )
)
(concate "hello" "world")
(assert
    (eq
        ((lambda ( x y) (+ x y)) 2 3)
        5
    )
    "why not"
)

(let ((a 7) (b 2) c)
    (format "{}" a)
    (format "{}" b)
    (let ((c 4) (b 11))
        (format "{}" c)
        (format "{}" b)
    )
)

(if t ( format "{}" "then-block"))
(if t ( format "{}" "then-block") (format "{}" "else-block") )
(if nil ( format "{}" "then-block") (format "{}" "else-block"))
(if nil ( format "{}" "then-block"))

(format "{}" (progn (+ 1 1) (- 1 1) (* 9 9)))

(format "{}" '(1 2 3))
(format "{}" '3)
(format "{}" `(4 5))
(format "{}" `(4 5 (7 8 ,(+ 6 4) ,120)))

(format "{}" (when t (+1 2)) )
(format "{}" (when nil (+1 2)) )

(assert (<= 3 5) "yes")
(assert (eq (>= 4 99) nil) "yes")
(assert (!= 3 5) "yes")

(for (i 0) (< i 5) (+ i 1)
    (progn (format "{}" i)
    (assert (< i 10) "why not")
    )
)
(dotimes i 4 (format "{}" i))
(setq foo "=foo=" bar foo)
(format "{}" foo)
(format "{}" bar)
(assert (eq "=foo=" foo) "why not")
(assert (!= "-foo=" foo) "why not")
(assert (eq "=foo=" bar) "why not")
(assert (!= "-foo=" bar) "why not")
(let ((a 3)
        (b 4)
        (c 5))
    (assert (eq 35 (* (+ a b) c) ) "why not" ))
(let ((a 3))
    (+ a 2))
(setq w 77)
 (let ((w 8)
        (x w))
    (+ w x))

(cons 1 nil)
(cons 2 (cons 1 nil))
(cons 3 (cons 2 (cons 1 nil)))
(cons 1 ())
(cons 2 (cons 1 ()))
(cons 3 (cons 2 (cons 1 ())))
(list 1 2 3)
(list 1 2 'hello "there" 3)
(list)
(list ())
(list nil)
(list (+ 3 4) (- 3 5))
(setq my-list (quote (1 2 3 4 5)))
(format "{}" my-list)
(rest my-list)
(first (rest my-list))
(rest (rest my-list))
(first (rest (rest my-list)))
(rest (rest (rest my-list)))
(first (rest (rest (rest my-list))))
(assert (eq (first (list 4 2 3)) 4 ) "why not")
(assert (eq (rest (list 4 2 3)) '(2 3 )) "why not")
(assert (eq (rest (list 4 2 3)) (quote(2 3 ))) "why not")
(assert (eq (rest (list 4 2 3)) (list 2 3 )) "why not")
(eq 'a 'a)
(eq 'david 'a)
(eq 'David 'DAVID)
(setq zzz 'sleeper)
(eq zzz 'sleeper)
 (setq L (list 'a 'b 'c))
 (setq a 5)
  (format "{}" a)
 (let ((a 6)) (format "{}" a))
 (format "{}" a)
(cons 1 '(2 3))
(rcons '(2 3) 4)
; test comment
(/ 15.0 2) ;test comment
(* 3 9)     ; test comment
(/ 1 3)
(when t (format "{}" "when macro"))
-444
"abc"
(defun foo (&key a b c) (list a b c))
(assert (eq (foo) (list () () ())) "why not")
(assert (eq (foo :c 3 :a 1) (list 1 () 3)) "why not")
(assert (eq (foo :a 1 :b 2 :c 3) (list 1 2 3)) "why not")
(assert (eq (foo :c 3 :a 1 :b 2) (list 1 2 3)) "why not")
(assert (eq (foo :a 1 :b 2) (list 1 2 nil)) "why not")
(list (quote a) (quote (cons a 3)))
(setq fn '+)
(format "{}" (fn 1 2))
(setq a-string "This string
contains
forty-two characters.")
(format "{}" a-string)
(let ((x '(1 2 3 4))) `(this is an example ,x of expansion))
(let ((x '(1 2 3 4))) `(this is an example ,@x of expansion))
(defun f (x) `(here ,@x we go))
(f '(1 2 3))